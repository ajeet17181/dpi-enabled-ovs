{"name":"DPI enabled OVS","tagline":"Extending Open vSwitch with Deep Packet Inspection functionalities","body":"### What is this project about ?\r\n\r\nThis a fork of [Open vSwitch](https://github.com/openvswitch/ovs), with <b>additional interface to load 3rd party / external / customer DPI engine </b> on top of Open vSwitch.\r\nThis project is part of my MS Thesis (BITS). \r\n\r\n### Why DPI + OVS ? \r\n\r\nBy definition, DPI – Deep Packet Inspection means, determining the application (Ex Youtube, Skype etc) by analyzing the Ethernet frames. Advantage of DPI is that, enterprise level decisions can be made based upon the analyzed data.  (Ex. Boost the bandwidth, Determine the application level network usage etc.)\r\n\r\nIt is important to understand that, DPI is not, merely a packet analysis, but it also provides capabilities for network steering upon the data it receives from the network. Though the traffic analysis can be made centralized in the controller plane, the effective classification of packet can be done, only at the switch level.\r\n\r\nIf you look at the present scenario in traditional networking ecosystem, DPI is performed by highly specialized hardware with proprietary DPI techniques. This makes sense, as long as the network is made of traditional hardware oriented set ups. Industry had started to embrace the SDN ecosystem, where-in, any commodity hardware can be used to virtualize network functions (NFV). Hence DPI in specialized hardware doesn’t make sense anymore. DPI has to be even virtualized.\r\n\r\n### DPI in OVS\r\nPresently there is no DPI enabled soft switch, especially in the SDN ecosystem. The aim of this project ( part of my MS Thesis in BITS) is to provide DPI functionalities as part of Open vSwitch, so that any controller can take advantage of the DPI information and leverage the DPI functionalities to upper management layers. \r\n\r\n### High level design\r\n\r\nThe following fig, gives high-level overview on how DPI engine can be integrated.\r\n\r\n![High-level-design](https://cloud.githubusercontent.com/assets/7476271/7811632/9a58fd88-03c9-11e5-8d1a-a6b539179193.png)\r\n\r\n* `packet_clone for DPI` is very much necessary to create a new packet, as not all packets, reach `ovs upcall handler` due to flow cache that is maintained in kernel.\r\n* `Opaque DPI Interface` clearly abstracts Open vSwitch to outside world. So dynamically, any 3rd party / external / customer DPI engine can be hooked with OVS seamlessly.\r\n\r\n### Packet flow with new DPI plugin\r\n\r\n![packet flow](https://cloud.githubusercontent.com/assets/7476271/7811649/ad68b116-03c9-11e5-8285-389982720a58.png) \r\n\r\nAs you can see, for every incoming packet (green), corresponding DPI packets (black) will be cloned. As per existing logic, some packets (blue) will reach userspace for special processing, however all DPI packets (black) will reach DPI handler in userspace. This is very much necessary for any DPI engine. More packets == More data to analyse == Better results.\r\n\r\n### Project highlights\r\n\r\n* A new interface `dpi_plugin.h` which integrates OVS with any 3rd party / custom / DPI plugin.\r\n* Kernel datapath modified to clone all the incoming packets to send it to userspace with special label fpr DPI\r\n* A new `DpiWriteLog()` function, which enables plugin developers to log their contents directly into OVS logging framework. A handly tool for debugging & maintenance.\r\n* A sample DPI plugin `kspviswa-nDPI-plugin` that will demonstrate the power of `dpi-enabled-ovs`\r\n* * This plugin comes with its corresponding web-based application to view the DPI info at business application level.\r\n\r\n### Sample DPI plugin\r\n\r\nInorder to demonstrate the power of DPI enabled OVS, I wrote a sample plugin, that will collect the DPI data directly via OVS, powered by [nDPI engine](https://github.com/ntop/nDPI). Then with help of [Google charts](https://developers.google.com/chart/) API, I wrote a sample visualization application (analogous to business application on controller side) to harness the DPI information.\r\n\r\n## Mode of deployment\r\n\r\nI had introduced a command-line switch to dynamically load any DPI plugin. Here is the syntax\r\n\r\n`sudo ovs-vswitchd --dpi-engine=<path to plugin>`\r\n\r\n## High level design\r\n\r\nHere is the high level design of the plugin\r\n\r\n![dpi plugin](https://cloud.githubusercontent.com/assets/7476271/7811671/d4c92f88-03c9-11e5-9118-ff0ca5c334df.png )\r\n\r\n## Demo Output\r\n\r\nHere is the output from the business application. \r\n\r\n![dpi visio](https://cloud.githubusercontent.com/assets/7476271/7811689/ee441c98-03c9-11e5-8fbd-181bfb49e6eb.png)\r\n\r\n### Further development & contact\r\n\r\nThis project is part of my MS thesis. Feel free to contact me if you wish to take this project to next step, want to know how to deploy / enhance etc.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}